

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import java.lang.Boolean;

parser code {:

    boolean errorDetected;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
        errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
    errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

nonterminal NamespaceList, Namespace, MethodDeclList, PossibleFormPars, FormPars, PossibleArrayDecl, DeclarationList, VarDeclList, VarDecl, ConstDecl, MultipleConstDecl, StaticInitializer, StatementList, Statement, DesignatorStatement, ActPars, Label, Assignop, Addop, Mulop, DesStmtHelper;

nonterminal PossibleDesignatorStatementList, PossibleCondFact, MultipleVarDecl, SingleVar;
nonterminal ClassDecl, OptionalExtends, StaticVarDeclList, StaticInitializerList, OtpionalMethodDeclList, StaticInitializerHelper;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Literal, MethodDecl, MethodTypeName, Designator;
nonterminal NamespaceName, FactorCallPossiblePars, FormParam, ForLoopStart, PossibleDesignator, DesignatorArrayName, StatementListDetected, ForConditionStart, ForTailDesignatorStart, ForStatementsStart;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor, Condition, CondTerm, CondFact;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Relop;

nonterminal IfStartDetected, ORBlockDetected, IfConditionEndDetected, IfBlock, ForStatement, DesignatorStatementList;
nonterminal LastSingleVar, LastFormParam;
terminal PROG, NAMESPACE, LBRACE, RBRACE;
terminal BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ,RETURN, VOID, EXTENDS, CONTINUE, FOR, STATIC;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, NOTEQUAL, GRT, GRTE, LSS, LSSE, BITAND, BITOR, ASSIGN, PLUSPLUS, MINUSMINUS;
terminal SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE, LAMBDA;

terminal String IDENT;
terminal Integer NUMCONST;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p NamespaceList DeclarationList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

NamespaceList ::= (Namespaces) NamespaceList Namespace
                |
                (NoNamespace) /* epsilon */
                ;

Namespace ::= (Namespace) NAMESPACE NamespaceName LBRACE DeclarationList LBRACE MethodDeclList RBRACE RBRACE;

NamespaceName ::= (NamespaceName) IDENT:NamespaceName;

ClassDecl ::= (ClassDecl) CLASS IDENT OptionalExtends
                LBRACE
                StaticVarDeclList
                StaticInitializerHelper
                VarDeclList
                OtpionalMethodDeclList
                RBRACE
                ;

OptionalExtends ::= (Extends) EXTENDS Type
                |
                (NoExtends) /* epsilon */
                ;

StaticVarDeclList ::= (StaticVarDecls) StaticVarDeclList STATIC VarDecl
                    |
                    (NoStaticVarDecl) /* epsilon */
                    ;

StaticInitializerHelper ::= (StaticInitializerHelperYes) StaticInitializerList | (StaticInitializerHelperNo) /* epsilon */;

StaticInitializerList ::= (StaticInitializers) StaticInitializerList StaticInitializer
                    |
                    (StaticInitializerSingle) StaticInitializer
                    ;

StaticInitializer ::= (StaticInitializer) STATIC LBRACE StatementList RBRACE;//mozda bude bacalo konflikt

OtpionalMethodDeclList ::= (OptionalMethodDecls) LBRACE MethodDeclList RBRACE
                        |
                        (NoOptionalMethodDecl) /* epsilon */
                        ;

MethodDeclList ::= (MethodDecls) MethodDeclList MethodDecl
                |
                (NoMethodDecl) /* epsilon */
                ;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN PossibleFormPars RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodTypeName ::= (MethodWithType) Type IDENT:methodName | (VoidMethod) VOID IDENT:methodName;

PossibleFormPars ::= (PossibleFormParsDeclared) FormPars
                |
                (NoPossibleFormPars) /* epsilon */
                ;

FormPars ::= (FormParsList) FormPars COMMA LastFormParam
            |
            (SignleFromParam) FormParam
            ;

LastFormParam ::= (LastFormParamCorrect) Type:tip IDENT:paramName PossibleArrayDecl:possibleArray
            |
            (LastFormParamError) error:l
            {: parser.report_error("Izvrsen oporavak do ) u liniji " +lleft, null); :}
            ;

FormParam ::= (FormParamCorrect) Type:tip IDENT:paramName PossibleArrayDecl:possibleArray
            |
            (FormParamError) error:l
            {: parser.report_error("Izvrsen oporavak do , u liniji " +lleft, null); :}
            ;

PossibleArrayDecl ::= (PossibleArrayDeclYes)  LSQUARE RSQUARE | (NoPossibleArrayDecl) /* epislon */;

DeclarationList ::= (DeclarationListVarDecl) DeclarationList VarDecl
			|
			(DeclarationListConstDecl) DeclarationList ConstDecl
			|
			(DeclarationListClassDecl) DeclarationList ClassDecl
			|
			(NoDeclarationList)/* epsilon */
			;

VarDeclList ::= (VarDecls) VarDeclList VarDecl
                |
                (NoVarDecl) /* epsilon */
                ;

VarDecl ::= (VarDecl) Type:varType MultipleVarDecl:mulitpleVars SEMI
                ;

MultipleVarDecl ::= (MultipleVarDecls) MultipleVarDecl COMMA LastSingleVar
                |
                (MultipleVarDeclSingleVar) SingleVar
                ;

LastSingleVar ::= (LastSingleVarCorrect) IDENT:varName PossibleArrayDecl:possibleArray
                |
                (LastSingleVarError) error:l
                {: parser.report_error("Izvrsen oporavak do ; u liniji " +lleft, null); :}
                ;

SingleVar ::= (SingleVarCorrect) IDENT:varName PossibleArrayDecl:possibleArray
            |
            (SingleVarError) error:l
            {: parser.report_error("Izvrsen oporavak do , u liniji " +lleft, null); :}
            ;

Type ::= (TypeWNamespace) IDENT:namespace COLON COLON IDENT:typeName
        |
        (NormalType) IDENT:typeName
        ;

ConstDecl ::= (ConstDecl) CONST Type IDENT:constName ASSIGN Literal:literal MultipleConstDecl SEMI;

MultipleConstDecl ::= (MultipleConstDecls) MultipleConstDecl COMMA IDENT:constName ASSIGN Literal:literal
                    |
                    (NoMultipleConst) /* epsilon */
                    ;

Literal ::= (LiteralNUM) NUMCONST:value | (LiteralBOOL) BOOLCONST:value | (LiteralCHAR) CHARCONST:value;

StatementList ::= (Statements) StatementList Statement
                |
                (NoStatement) /* epsilon */
                ;

Statement ::=  (StatementWDesignatorStmt) DesignatorStatement SEMI
            |
            (IfStatement) IfBlock
            |
            (IfElseStatement) IfBlock ELSE Statement
            |
            (StatementBreak) BREAK SEMI
            |
            (StatementContinue) CONTINUE SEMI
            |
            (StatementRetrun) RETURN SEMI
            |
            (StatementReturnExpr) RETURN Expr SEMI
            |
            (StatementRead) READ LPAREN Designator RPAREN SEMI
            |
            (StatementPrintSingle) PRINT LPAREN Expr RPAREN SEMI
            |
            (StatementPrintMultiple) PRINT LPAREN Expr COMMA NUMCONST RPAREN SEMI
            |
            (StatementForLoop) ForLoopStart LPAREN PossibleDesignatorStatementList ForConditionStart PossibleCondFact ForTailDesignatorStart PossibleDesignatorStatementList ForStatementsStart ForStatement
            |
            (StatementStmtList) LBRACE StatementListDetected StatementList RBRACE
            ;
//all helpert for if-else
IfStartDetected ::= (IfStartDetected) IF;

IfConditionEndDetected ::= (IfConditionEndDetectedCorrect) IfStartDetected LPAREN Condition RPAREN
                        |
                        (IfConditionError) IfStartDetected LPAREN error:l {: parser.report_error("Izvrsen oporavak do ) u liniji " + lleft, null); :} RPAREN
                        ;

IfBlock ::= (IfBlock) IfConditionEndDetected Statement;

StatementListDetected ::= (StatementListDetected) /*epsilon*/;

ForLoopStart ::= (ForLoopStart) FOR;

ForConditionStart ::= (ForConditionStart) SEMI;

ForStatementsStart ::= (ForStatementsStart) RPAREN;

ForStatement ::= (ForStatement) Statement;

ForTailDesignatorStart ::= (ForTailDesignatorStart) SEMI;

PossibleCondFact ::= (PossibleCondFactYes) CondFact | (PossibleCondFactNo) /* epsilon */;

DesignatorStatementList ::= (DesignatorStatements) DesignatorStatementList COMMA DesignatorStatement
                                    |
                                    (SingleDesignatorStatement) DesignatorStatement
                                    ;

PossibleDesignatorStatementList ::= (PossibleDesignatorStatementListYes) DesignatorStatementList | (PossibleDesignatorStatementListNo) /* epsilon*/ ;

DesignatorStatement ::= (DesignatorStmtAssign) Designator Assignop Expr
                    |
                    (DesignatorStatementError) error:l
                    {: parser.report_error("Izvrsen oporavak do ; u liniji " +lleft, null); :}
                    |
                    (DesignatorStmtCallNoArg) Designator LPAREN RPAREN
                    |
                    (DesignatorStmtCallArg) Designator LPAREN ActPars RPAREN
                    |
                    (DesignatorStmtPlusPlus) Designator PLUSPLUS
                    |
                    (DesignatorStmtMinusMinus) Designator MINUSMINUS
                    |
                    (DesignatorStatementMultipleAssign) LSQUARE DesStmtHelper MUL Designator:lastLeft RSQUARE ASSIGN Designator:rightDes
                    ;

DesStmtHelper ::= (DesStmtHelperYes) DesStmtHelper PossibleDesignator:des COMMA
                |
                (DesStmtHelperNo) /* epsilon */
                ;

PossibleDesignator ::= (DesignatorYes) Designator | (DesignatorNo) /* epsilon*/;

ActPars ::= (ActParams) ActPars COMMA Expr:e
        |
        (ActParam) Expr:e
        ;

Condition ::= (ConditionBITOR) ORBlockDetected BITOR CondTerm
            |
            (NormalCondition) CondTerm
            ;

ORBlockDetected ::= (ORBlockDetected) Condition;

CondTerm ::= (CondTermBITAND) CondTerm BITAND CondFact
            |
            (NormalCondTerm) CondFact
            ;


CondFact ::= (NormalCondFact) Expr:e
            |
            (RelopCondFact) Expr:e1 Relop Expr:e2
            ;

Expr ::= (GeneralExpr) Expr:e Addop Term:t
        |
        (ExprMinusTerm) MINUS Term:t
        |
        (ExprTerm) Term:t
        ;

Term ::= (TermMulop) Term:term Mulop Factor:fac//multiplication
        |
        (TermFactor) Factor:fac
        ;

Factor ::= (FactorDesignator) Designator:des
        |
        (FactorCall) Designator:des LPAREN FactorCallPossiblePars:possPars RPAREN
        |
        (FactorNum) NUMCONST:numValue
        |
        (FactorChar) CHARCONST:charValue
        |
        (FactorBool) BOOLCONST:boolValue
        |
        (FactorNewArrayExpr) NEW Type LSQUARE Expr:expr RSQUARE
        |
        (FactorNewFunctionParams) NEW Type LPAREN ActPars RPAREN
        |
        (FactorNewFunctionNoParams) NEW Type LPAREN RPAREN
        |
        (FactorParenExpr) LPAREN Expr RPAREN
        ;

FactorCallPossiblePars ::= (FactorCallPossibleParsYes) ActPars | (FactorCallPossibleParsNo) /* epsilon */;

Designator ::= (DesignatorWNamespace) IDENT:namespace COLON COLON IDENT:desName
            |
            (DesignatorWONamespace) IDENT:desName
            |
            (DesignatorField) Designator DOT IDENT:fieldName
            |
            (DesignatorArray) DesignatorArrayName LSQUARE Expr:index RSQUARE
            ;

DesignatorArrayName ::= (DesignatorArrayName) Designator;

Label ::= (Label) IDENT;

Assignop ::= (Assignop) ASSIGN
        ;

Relop ::= (RelopEQUAL) EQUAL
        |
        (RelopNOTEQUAL) NOTEQUAL
        |
        (RelopGRT) GRT
        |
        (RelopGRTE) GRTE
        |
        (RelopLSS) LSS
        |
        (RelopLSSE) LSSE
        ;

Addop ::= (AddopPLUS) PLUS | (AddopMINUS) MINUS;

Mulop ::= (MulopMUL) MUL | (MulopDIV) DIV | (MulopMOD) MOD ;
