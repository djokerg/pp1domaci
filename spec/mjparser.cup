

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

nonterminal Program, NamespaceList, Namespace, MethodDeclList, MethodDecl, TypeOrVoid, PossibleFormPars, FormPars, PossibleArrayDecl, DeclarationList, VarDeclList, VarDecl, MultipleVarDecl, Type, ConstDecl, MultipleConstDecl, Literal, StaticInitializer, StatementList, Statement, DesignatorStatement, Operation, ActPars, Condition, CondTerm, CondFact, Expr, TermList, Term, Factor, Designator, DesignatorHelperList, Label, Assignop, Relop, Addop, Mulop, DesStmtHelper;

nonterminal PossibleDesignatorStatementList, PossibleCondFact, ForLoopHelper;
nonterminal ClassDecl, OptionalExtends, StaticVarDeclList, StaticInitializerList, OtpionalMethodDeclList, StaticInitializerHelper;
terminal PROG, IDENT, NAMESPACE, LBRACE, RBRACE;
terminal BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ,RETURN, VOID, EXTENDS, CONTINUE, FOR, STATIC;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL, NOTEQUAL, GRT, GRTE, LSS, LSSE, BITAND, BITOR, ASSIGN, PLUSPLUS, MINUSMINUS;
terminal SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE, LAMBDA;

terminal NUMCONST, CHARCONST, BOOLCONST;

precedence left ELSE;

Program ::= PROG IDENT NamespaceList DeclarationList LBRACE MethodDeclList RBRACE;

NamespaceList ::= NamespaceList Namespace
                |
                /* epsilon */
                ;

Namespace ::= NAMESPACE IDENT LBRACE DeclarationList LBRACE MethodDeclList RBRACE RBRACE;

ClassDecl ::= CLASS IDENT OptionalExtends
                LBRACE
                StaticVarDeclList
                StaticInitializerHelper
                VarDeclList
                OtpionalMethodDeclList
                RBRACE
                ;

OptionalExtends ::= EXTENDS Type
                |
                /* epsilon */
                ;

StaticVarDeclList ::= StaticVarDeclList STATIC VarDecl
                    |
                    /* epsilon */
                    ;

StaticInitializerHelper ::= StaticInitializerList | /* epsilon */;

StaticInitializerList ::= StaticInitializer
                    |
                    StaticInitializerList StaticInitializer
                    ;

StaticInitializer ::= STATIC LBRACE StatementList RBRACE;//mozda bude bacalo konflikt

OtpionalMethodDeclList ::= LBRACE MethodDeclList RBRACE
                        |
                        /* epsilon */
                        ;

MethodDeclList ::= MethodDeclList MethodDecl
                |
                /* epsilon */
                ;

MethodDecl ::= TypeOrVoid IDENT LPAREN PossibleFormPars RPAREN VarDeclList LBRACE StatementList RBRACE;

TypeOrVoid ::= Type | VOID;

PossibleFormPars ::= FormPars | /* epsilon */;

FormPars ::= FormPars COMMA Type IDENT PossibleArrayDecl
            |
            Type IDENT PossibleArrayDecl
            ;

PossibleArrayDecl ::= LSQUARE RSQUARE | /* epislon */;

DeclarationList ::= DeclarationList VarDecl
			|
			DeclarationList ConstDecl
			|
			DeclarationList ClassDecl
			|
			/* epsilon */
			;
VarDeclList ::= VarDeclList VarDecl
                |
                /* epsilon */
                ;

VarDecl ::= Type IDENT MultipleVarDecl SEMI
        |
        Type IDENT LSQUARE RSQUARE MultipleVarDecl SEMI
        ;

MultipleVarDecl ::= MultipleVarDecl COMMA IDENT
                |
                MultipleVarDecl COMMA IDENT LSQUARE RSQUARE
                |
                /* epsilon */
                ;

Type ::= IDENT COLON COLON IDENT
        |
        IDENT;

ConstDecl ::= CONST Type IDENT ASSIGN Literal MultipleConstDecl SEMI;

MultipleConstDecl ::= MultipleConstDecl COMMA IDENT ASSIGN Literal
                    |
                    /* epsilon */
                    ;

Literal ::= NUMCONST | BOOLCONST | CHARCONST;

StatementList ::= StatementList Statement
                |
                /* epsilon */
                ;

Statement ::= DesignatorStatement SEMI
            |
            IF LPAREN Condition RPAREN Statement
            |
            IF LPAREN Condition RPAREN Statement ELSE Statement
            |
            BREAK SEMI
            |
            CONTINUE SEMI
            |
            RETURN SEMI
            |
            RETURN Expr SEMI
            |
            READ LPAREN Designator RPAREN SEMI
            |
            PRINT LPAREN Expr RPAREN SEMI
            |
            PRINT LPAREN Expr COMMA NUMCONST RPAREN SEMI
            |
            FOR LPAREN PossibleDesignatorStatementList SEMI PossibleCondFact SEMI PossibleDesignatorStatementList RPAREN Statement
            |
            LBRACE StatementList RBRACE
            ;

PossibleCondFact ::= CondFact | /* epsilon */;

PossibleDesignatorStatementList ::= DesignatorStatement ForLoopHelper
                                    |
                                    /* epsilon */
                                    ;

ForLoopHelper ::= ForLoopHelper COMMA DesignatorStatement
                |
                /* epsilon */
                ;

DesignatorStatement ::= Designator Operation
                    |
                    LSQUARE DesStmtHelper MUL Designator RSQUARE ASSIGN Designator
                    ;

DesStmtHelper ::= DesStmtHelper COMMA
                |
                DesStmtHelper Designator COMMA
                |
                /* epsilon */
                ;

Operation ::= Assignop Expr
            |
            LPAREN RPAREN
            |
            LPAREN ActPars RPAREN
            |
            PLUSPLUS
            |
            MINUSMINUS
            ;

ActPars ::= ActPars COMMA Expr
        |
        Expr
        ;

Condition ::= Condition BITOR CondTerm
            |
            CondTerm
            ;

CondTerm ::= CondTerm BITAND CondFact
            |
            CondFact
            ;

CondFact ::= Expr
            |
            Expr Relop Expr
            ;

Expr ::= MINUS Term TermList
        |
        Term TermList
        ;

TermList ::= TermList Addop Term
            |
            /* epsilon */
            ;

Term ::= Term Mulop Factor
        |
        Factor
        ;

Factor ::= Designator
        |
        Designator LPAREN ActPars RPAREN
        |
        Designator LPAREN RPAREN
        |
        NUMCONST
        |
        CHARCONST
        |
        BOOLCONST
        |
        NEW Type LSQUARE Expr RSQUARE
        |
        NEW Type LSQUARE RSQUARE
        |
        NEW Type LPAREN ActPars RPAREN
        |
        NEW Type LPAREN RPAREN
        |
        LPAREN Expr RPAREN
        ;

Designator ::= IDENT COLON COLON IDENT DesignatorHelperList
            |
            IDENT DesignatorHelperList
            ;

DesignatorHelperList ::= DesignatorHelperList DOT IDENT
                    |
                    DesignatorHelperList LSQUARE Expr RSQUARE
                    |
                    /* epsilon */
                    ;

Label ::= IDENT;

Assignop ::= ASSIGN;

Relop ::= EQUAL | NOTEQUAL | GRT | GRTE | LSS | LSSE;

Addop ::= PLUS | MINUS;

Mulop ::= MUL | DIV | MOD ;
