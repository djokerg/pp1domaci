INFO  16:54:48,169 - Compiling source file: C:\Users\gd200089d\Desktop\pp1domaci\MJCompiler\test\program.mj
INFO  16:54:48,217 - #2 program
INFO  16:54:48,217 - #45 test301
INFO  16:54:48,217 - #3 namespace
INFO  16:54:48,218 - #45 Konstante
INFO  16:54:48,218 - #4 {
INFO  16:54:48,219 - #9 const
INFO  16:54:48,219 - #45 int
INFO  16:54:48,219 - #45 nula
INFO  16:54:48,219 - #33 =
INFO  16:54:48,219 - #46 0
INFO  16:54:48,219 - #36 ;
INFO  16:54:48,220 - #9 const
INFO  16:54:48,220 - #45 int
INFO  16:54:48,220 - #45 jedan
INFO  16:54:48,220 - #33 =
INFO  16:54:48,220 - #46 1
INFO  16:54:48,220 - #36 ;
INFO  16:54:48,220 - #9 const
INFO  16:54:48,220 - #45 int
INFO  16:54:48,220 - #45 pet
INFO  16:54:48,220 - #33 =
INFO  16:54:48,222 - #46 5
INFO  16:54:48,222 - #36 ;
INFO  16:54:48,222 - #9 const
INFO  16:54:48,222 - #45 char
INFO  16:54:48,222 - #45 djok
INFO  16:54:48,223 - #33 =
INFO  16:54:48,223 - #48 a
INFO  16:54:48,223 - #36 ;
INFO  16:54:48,223 - #4 {
INFO  16:54:48,223 - #5 }
INFO  16:54:48,223 - #5 }
INFO  16:54:48,223 - #3 namespace
INFO  16:54:48,224 - #45 Nizovi
INFO  16:54:48,224 - #4 {
INFO  16:54:48,224 - #45 int
INFO  16:54:48,224 - #45 niz
INFO  16:54:48,224 - #42 [
INFO  16:54:48,224 - #43 ]
INFO  16:54:48,224 - #36 ;
INFO  16:54:48,225 - #45 char
INFO  16:54:48,225 - #45 nizch
INFO  16:54:48,225 - #42 [
INFO  16:54:48,225 - #43 ]
INFO  16:54:48,225 - #36 ;
INFO  16:54:48,225 - #4 {
INFO  16:54:48,225 - #5 }
INFO  16:54:48,225 - #5 }
INFO  16:54:48,225 - #45 int
INFO  16:54:48,225 - #45 a
INFO  16:54:48,225 - #36 ;
INFO  16:54:48,226 - #4 {
INFO  16:54:48,226 - #45 int
INFO  16:54:48,226 - #45 sum
INFO  16:54:48,226 - #40 (
INFO  16:54:48,226 - #45 int
INFO  16:54:48,226 - #45 a
INFO  16:54:48,226 - #38 ,
INFO  16:54:48,227 - #45 int
INFO  16:54:48,227 - #45 b
INFO  16:54:48,227 - #41 )
INFO  16:54:48,227 - #4 {
INFO  16:54:48,227 - #14 return
INFO  16:54:48,228 - #45 a
INFO  16:54:48,228 - #20 +
INFO  16:54:48,228 - #45 b
INFO  16:54:48,229 - #36 ;
INFO  16:54:48,229 - #5 }
INFO  16:54:48,229 - #15 void
INFO  16:54:48,230 - #45 main
INFO  16:54:48,230 - #40 (
INFO  16:54:48,230 - #41 )
INFO  16:54:48,230 - #4 {
INFO  16:54:48,230 - #18 for
INFO  16:54:48,230 - #40 (
INFO  16:54:48,231 - #45 a
INFO  16:54:48,231 - #33 =
INFO  16:54:48,231 - #46 0
INFO  16:54:48,231 - #36 ;
INFO  16:54:48,231 - #45 a
INFO  16:54:48,232 - #29 <
INFO  16:54:48,232 - #46 5
INFO  16:54:48,232 - #36 ;
INFO  16:54:48,232 - #45 a
INFO  16:54:48,233 - #33 =
INFO  16:54:48,233 - #45 a
INFO  16:54:48,233 - #20 +
INFO  16:54:48,233 - #46 1
INFO  16:54:48,233 - #41 )
INFO  16:54:48,233 - #4 {
INFO  16:54:48,233 - #12 print
INFO  16:54:48,234 - #40 (
INFO  16:54:48,234 - #48 a
INFO  16:54:48,234 - #41 )
INFO  16:54:48,234 - #36 ;
INFO  16:54:48,234 - #5 }
INFO  16:54:48,234 - #5 }
INFO  16:54:48,235 - #5 }
INFO  16:54:48,239 - Program(
  ProgName(
   test301
  ) [ProgName]
  Namespaces(
    Namespaces(
      NoNamespace(
      ) [NoNamespace]
      Namespace(
        NamespaceName(
         Konstante
        ) [NamespaceName]
        DeclarationListConstDecl(
          DeclarationListConstDecl(
            DeclarationListConstDecl(
              DeclarationListConstDecl(
                NoDeclarationList(
                ) [NoDeclarationList]
                ConstDecl(
                  NormalType(
                   int
                  ) [NormalType]
                 nula
                  LiteralNUM(
                   0
                  ) [LiteralNUM]
                  NoMultipleConst(
                  ) [NoMultipleConst]
                ) [ConstDecl]
              ) [DeclarationListConstDecl]
              ConstDecl(
                NormalType(
                 int
                ) [NormalType]
               jedan
                LiteralNUM(
                 1
                ) [LiteralNUM]
                NoMultipleConst(
                ) [NoMultipleConst]
              ) [ConstDecl]
            ) [DeclarationListConstDecl]
            ConstDecl(
              NormalType(
               int
              ) [NormalType]
             pet
              LiteralNUM(
               5
              ) [LiteralNUM]
              NoMultipleConst(
              ) [NoMultipleConst]
            ) [ConstDecl]
          ) [DeclarationListConstDecl]
          ConstDecl(
            NormalType(
             char
            ) [NormalType]
           djok
            LiteralCHAR(
             a
            ) [LiteralCHAR]
            NoMultipleConst(
            ) [NoMultipleConst]
          ) [ConstDecl]
        ) [DeclarationListConstDecl]
        NoMethodDecl(
        ) [NoMethodDecl]
      ) [Namespace]
    ) [Namespaces]
    Namespace(
      NamespaceName(
       Nizovi
      ) [NamespaceName]
      DeclarationListVarDecl(
        DeclarationListVarDecl(
          NoDeclarationList(
          ) [NoDeclarationList]
          VarDeclNormal(
            NormalType(
             int
            ) [NormalType]
            MultipleVarDeclSingleVar(
              SingleVar(
               niz
                PossibleArrayDeclYes(
                ) [PossibleArrayDeclYes]
              ) [SingleVar]
            ) [MultipleVarDeclSingleVar]
          ) [VarDeclNormal]
        ) [DeclarationListVarDecl]
        VarDeclNormal(
          NormalType(
           char
          ) [NormalType]
          MultipleVarDeclSingleVar(
            SingleVar(
             nizch
              PossibleArrayDeclYes(
              ) [PossibleArrayDeclYes]
            ) [SingleVar]
          ) [MultipleVarDeclSingleVar]
        ) [VarDeclNormal]
      ) [DeclarationListVarDecl]
      NoMethodDecl(
      ) [NoMethodDecl]
    ) [Namespace]
  ) [Namespaces]
  DeclarationListVarDecl(
    NoDeclarationList(
    ) [NoDeclarationList]
    VarDeclNormal(
      NormalType(
       int
      ) [NormalType]
      MultipleVarDeclSingleVar(
        SingleVar(
         a
          NoPossibleArrayDecl(
          ) [NoPossibleArrayDecl]
        ) [SingleVar]
      ) [MultipleVarDeclSingleVar]
    ) [VarDeclNormal]
  ) [DeclarationListVarDecl]
  MethodDecls(
    MethodDecls(
      NoMethodDecl(
      ) [NoMethodDecl]
      MethodDecl(
        MethodWithType(
          NormalType(
           int
          ) [NormalType]
         sum
        ) [MethodWithType]
        PossibleFormParsDeclared(
          FormParsList(
            SignleFromParam(
              FormParam(
                NormalType(
                 int
                ) [NormalType]
               a
                NoPossibleArrayDecl(
                ) [NoPossibleArrayDecl]
              ) [FormParam]
            ) [SignleFromParam]
            FormParam(
              NormalType(
               int
              ) [NormalType]
             b
              NoPossibleArrayDecl(
              ) [NoPossibleArrayDecl]
            ) [FormParam]
          ) [FormParsList]
        ) [PossibleFormParsDeclared]
        NoVarDecl(
        ) [NoVarDecl]
        Statements(
          NoStatement(
          ) [NoStatement]
          StatementReturnExpr(
            GeneralExpr(
              ExprTerm(
                TermFactor(
                  FactorDesignator(
                    DesignatorWONamespace(
                     a
                    ) [DesignatorWONamespace]
                  ) [FactorDesignator]
                ) [TermFactor]
              ) [ExprTerm]
              AddopPLUS(
              ) [AddopPLUS]
              TermFactor(
                FactorDesignator(
                  DesignatorWONamespace(
                   b
                  ) [DesignatorWONamespace]
                ) [FactorDesignator]
              ) [TermFactor]
            ) [GeneralExpr]
          ) [StatementReturnExpr]
        ) [Statements]
      ) [MethodDecl]
    ) [MethodDecls]
    MethodDecl(
      VoidMethod(
       main
      ) [VoidMethod]
      NoPossibleFormPars(
      ) [NoPossibleFormPars]
      NoVarDecl(
      ) [NoVarDecl]
      Statements(
        NoStatement(
        ) [NoStatement]
        StatementForLoop(
          ForLoopStart(
          ) [ForLoopStart]
          SingleDesignatorStatement(
            DesignatorStmtAssign(
              DesignatorWONamespace(
               a
              ) [DesignatorWONamespace]
              Assignop(
              ) [Assignop]
              ExprTerm(
                TermFactor(
                  FactorNum(
                   0
                  ) [FactorNum]
                ) [TermFactor]
              ) [ExprTerm]
            ) [DesignatorStmtAssign]
          ) [SingleDesignatorStatement]
          ForConditionStart(
          ) [ForConditionStart]
          PossibleCondFactYes(
            RelopCondFact(
              ExprTerm(
                TermFactor(
                  FactorDesignator(
                    DesignatorWONamespace(
                     a
                    ) [DesignatorWONamespace]
                  ) [FactorDesignator]
                ) [TermFactor]
              ) [ExprTerm]
              RelopLSS(
              ) [RelopLSS]
              ExprTerm(
                TermFactor(
                  FactorNum(
                   5
                  ) [FactorNum]
                ) [TermFactor]
              ) [ExprTerm]
            ) [RelopCondFact]
          ) [PossibleCondFactYes]
          ForTailDesignatorStart(
          ) [ForTailDesignatorStart]
          SingleDesignatorStatement(
            DesignatorStmtAssign(
              DesignatorWONamespace(
               a
              ) [DesignatorWONamespace]
              Assignop(
              ) [Assignop]
              GeneralExpr(
                ExprTerm(
                  TermFactor(
                    FactorDesignator(
                      DesignatorWONamespace(
                       a
                      ) [DesignatorWONamespace]
                    ) [FactorDesignator]
                  ) [TermFactor]
                ) [ExprTerm]
                AddopPLUS(
                ) [AddopPLUS]
                TermFactor(
                  FactorNum(
                   1
                  ) [FactorNum]
                ) [TermFactor]
              ) [GeneralExpr]
            ) [DesignatorStmtAssign]
          ) [SingleDesignatorStatement]
          ForStatementsStart(
          ) [ForStatementsStart]
          ForStatement(
            StatementStmtList(
              StatementListDetected(
              ) [StatementListDetected]
              Statements(
                NoStatement(
                ) [NoStatement]
                StatementPrintSingle(
                  ExprTerm(
                    TermFactor(
                      FactorChar(
                       a
                      ) [FactorChar]
                    ) [TermFactor]
                  ) [ExprTerm]
                ) [StatementPrintSingle]
              ) [Statements]
            ) [StatementStmtList]
          ) [ForStatement]
        ) [StatementForLoop]
      ) [Statements]
    ) [MethodDecl]
  ) [MethodDecls]
) [Program]
INFO  16:54:48,239 - ===================================
INFO  16:54:48,241 - Deklarisana promenljiva niz na liniji 15
INFO  16:54:48,241 - Deklarisana promenljiva nizch na liniji 16
INFO  16:54:48,241 - Deklarisana promenljiva a na liniji 23
INFO  16:54:48,241 - Obradjuje se metod sum na liniji 26
INFO  16:54:48,241 - Obradjuje se metod main na liniji 30
INFO  16:54:48,241 - ===================================
INFO  16:54:48,245 - Parsiranje uspesno zavrseno!
